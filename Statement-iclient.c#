// Skeleton generated by Hyland Unity Editor on 4/13/2017 11:53:23 AM
namespace StatementList
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using System.Windows.Forms;
    
    /// <summary>
    /// Test for OLB Statement Pull
    /// </summary>
    public class StatementList : Hyland.Unity.IClientScript
    {
        //int AccountNum;// = "Add account num here;
		//string MemberName;// = "Membername here";
		string doclist;
		int daysfordate = 365;
        #region IClientScript
        /// <summary>
        /// Implementation of <see cref="IClientScript.OnBeginBatch" />.
        /// <seealso cref="IClientScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnBeginBatch(Hyland.Unity.Application app, Hyland.Unity.ClientBatchEventArgs args)
        {
            // Add Code Here
        }
        
        /// <summary>
        /// Implementation of <see cref="IClientScript.OnClientScriptExecute" />.
        /// <seealso cref="IClientScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnClientScriptExecute(Hyland.Unity.Application app, Hyland.Unity.ClientEventArgs args)
        {
			try
			{
            DocumentType docType = app.Core.DocumentTypes.Find("Statements - 5/23/2009 to Present");
			Document doc = args.Document;
			KeywordType Accttype = app.Core.KeywordTypes.Find("Keystone Acct #");
			KeywordType Memtype =app.Core.KeywordTypes.Find("Member Name");
			KeywordRecord keyRecAcct = doc.KeywordRecords.Find(Accttype);
			KeywordRecord keyRecMem = doc.KeywordRecords.Find(Memtype);
			Keyword AccountNum = keyRecAcct.Keywords.Find(Accttype);
			Keyword MemberName = keyRecAcct.Keywords.Find(Memtype);
			
			
			if (MemberName == null)
            {
            	throw new Exception("Membername is null");
            }
            if (AccountNum == null)
            {
            	throw new Exception("AccountNum is null");
            }
			if (docType == null)
            {
            	throw new Exception("Statements - 5/23/2009 to Present Doc Type is missing");
            }
			DocumentQuery docQuery = app.Core.CreateDocumentQuery();
			docQuery.AddDocumentType(docType);
			docQuery.AddKeyword("Keystone Acct #", AccountNum.Numeric20Value, KeywordOperator.Equal ,KeywordRelation.And);
			docQuery.AddKeyword("Member Name", MemberName.ToString(), KeywordOperator.Equal ,KeywordRelation.And);
			docQuery.AddDateRange(DateTime.Today.AddDays(-daysfordate),DateTime.Today);
			DocumentList queryResult = docQuery.Execute(1000);
			foreach(Document docs in queryResult)
				{
					doclist = doclist + " -.- " + docs.Name;
					app.Diagnostics.Write(doc.Name);
					foreach (KeywordRecord rec in docs.KeywordRecords)
					{
						foreach (Keyword key in rec.Keywords)
						{
							app.Diagnostics.Write("        " + key.KeywordType.Name + " : " + key.Value.ToString());
						}
					}
				}
			MessageBox.Show(doclist);
				app.Diagnostics.Write("Complete List is: " + doclist);
			}
			catch(Exception ex)
			{
				app.Diagnostics.Write(ex.Message); 
				app.Diagnostics.Write(ex.StackTrace); 
			}
        }
        
        /// <summary>
        /// Implementation of <see cref="IClientScript.OnEndBatch" />.
        /// <seealso cref="IClientScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnEndBatch(Hyland.Unity.Application app, Hyland.Unity.ClientBatchEventArgs args)
        {
            // Add Code Here
        }
        #endregion
    }
}
